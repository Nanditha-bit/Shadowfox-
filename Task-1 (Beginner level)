{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3bb3fd18-6793-46a5-a7ac-d32b2df70bc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'float'>\n"
     ]
    }
   ],
   "source": [
    "pi = 22/7\n",
    "print(type(pi))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7752d400-b1e8-48e9-9d3e-6f286caf61a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "for_ = 4\n",
    "print(for_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "50d03c6f-7bc2-4ba2-962b-0c5be1424ba9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Simple Interest: 150.0\n"
     ]
    }
   ],
   "source": [
    "P = 1000\n",
    "R = 5\n",
    "T = 3\n",
    "SI = (P * R * T) / 100\n",
    "print(\"Simple Interest:\", SI)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d3de3807-dc1b-4ac6-8ebd-2f5ecc2df433",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "145 in octal is 221\n"
     ]
    }
   ],
   "source": [
    "def format_string(number , character):\n",
    "    formatted = \"{} in octal is {:o}\".format(number, number)\n",
    "    return formatted\n",
    "result = format_string(145, 'o')\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "40751012-1f46-436a-a106-09e63560b020",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "31018\n"
     ]
    }
   ],
   "source": [
    "pi = 3.14\n",
    "r = 84\n",
    "pond_area = pi * (r ** 2)\n",
    "water_per_sq_meter = 1.4\n",
    "total_water = int(pond_area * water_per_sq_meter)\n",
    "print(total_water)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "af8eca58-57ff-4b10-96b3-cac0957716dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "distance = 490\n",
    "time_minutes = 7\n",
    "time_seconds = time_minutes * 60\n",
    "speed = int(distance / time_seconds)\n",
    "print(speed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cf705c2a-3cc2-4966-b4b5-e991b21853b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of members: 6\n",
      "After recruitment: ['Superman', 'Batman', 'Wonder Woman', 'Flash', 'Aquaman', 'Green Lantern', 'Batgirl', 'Nightwing']\n",
      "After making Wonder Woman the leader: ['Wonder Woman', 'Superman', 'Batman', 'Flash', 'Aquaman', 'Green Lantern', 'Batgirl', 'Nightwing']\n",
      "After separating Aquaman and Flash: ['Wonder Woman', 'Batman', 'Flash', 'Aquaman', 'Superman', 'Green Lantern', 'Batgirl', 'Nightwing']\n",
      "New Justice League: ['Cyborg', 'Shazam', 'Hawkgirl', 'Martian Manhunter', 'Green Arrow']\n",
      "Sorted Justice League: ['Cyborg', 'Green Arrow', 'Hawkgirl', 'Martian Manhunter', 'Shazam']\n",
      "New leader: Cyborg\n"
     ]
    }
   ],
   "source": [
    "justice_league = [\"Superman\", \"Batman\", \"Wonder Woman\", \"Flash\", \"Aquaman\", \"Green Lantern\"]\n",
    "num_members = len(justice_league)\n",
    "print(\"Number of members:\", num_members)  \n",
    "\n",
    "justice_league.append(\"Batgirl\")\n",
    "justice_league.append(\"Nightwing\")\n",
    "print(\"After recruitment:\", justice_league)\n",
    "\n",
    "justice_league.remove(\"Wonder Woman\")\n",
    "justice_league.insert(0, \"Wonder Woman\")\n",
    "print(\"After making Wonder Woman the leader:\", justice_league)\n",
    "\n",
    "justice_league.remove(\"Superman\")\n",
    "aquaman_index = justice_league.index(\"Aquaman\")\n",
    "justice_league.insert(aquaman_index + 1, \"Superman\")\n",
    "print(\"After separating Aquaman and Flash:\", justice_league)\n",
    "\n",
    "justice_league = [\"Cyborg\", \"Shazam\", \"Hawkgirl\", \"Martian Manhunter\", \"Green Arrow\"]\n",
    "print(\"New Justice League:\", justice_league)\n",
    "\n",
    "justice_league.sort()\n",
    "print(\"Sorted Justice League:\", justice_league)\n",
    "\n",
    "new_leader = justice_league[0]\n",
    "print(\"New leader:\", new_leader)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fd62dc27-496e-42ae-9abf-d586186586da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter height in meters:  1.75\n",
      "Enter weight in kilograms:  70\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "BMI Category: Normal\n"
     ]
    }
   ],
   "source": [
    "height = float(input(\"Enter height in meters: \"))\n",
    "weight = float(input(\"Enter weight in kilograms: \"))\n",
    "\n",
    "bmi = weight / (height ** 2)\n",
    "\n",
    "if bmi >= 30:\n",
    "    category = \"Obesity\"\n",
    "elif 25 <= bmi < 30:\n",
    "    category = \"Overweight\"\n",
    "elif 18.5 <= bmi < 25:\n",
    "    category = \"Normal\"\n",
    "else:\n",
    "    category = \"Underweight\"\n",
    "\n",
    "print(f\"BMI Category: {category}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e776b771-6a7a-46cd-a718-b3d00f6abeb3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a city name:  Abu Dhabi\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Abu Dhabi is in UAE\n"
     ]
    }
   ],
   "source": [
    "countries = {\n",
    "    \"Australia\": [\"Sydney\", \"Melbourne\", \"Brisbane\", \"Perth\"],\n",
    "    \"UAE\": [\"Dubai\", \"Abu Dhabi\", \"Sharjah\", \"Ajman\"],\n",
    "    \"India\": [\"Mumbai\", \"Bangalore\", \"Chennai\", \"Delhi\"]\n",
    "}\n",
    "city = input(\"Enter a city name: \")\n",
    "\n",
    "found = False\n",
    "for country, cities in countries.items():\n",
    "    if city in cities:\n",
    "        print(f\"{city} is in {country}\")\n",
    "        found = True\n",
    "        break\n",
    "\n",
    "if not found:\n",
    "    print(\"City not found in the list.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f1f7edaa-e153-4f09-8604-4374e2679081",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the first city:  Mumbai\n",
      "Enter the second city:  Chennai\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both cities are in India\n"
     ]
    }
   ],
   "source": [
    "countries = {\n",
    "    \"Australia\": [\"Sydney\", \"Melbourne\", \"Brisbane\", \"Perth\"],\n",
    "    \"UAE\": [\"Dubai\", \"Abu Dhabi\", \"Sharjah\", \"Ajman\"],\n",
    "    \"India\": [\"Mumbai\", \"Bangalore\", \"Chennai\", \"Delhi\"]\n",
    "}\n",
    "city1 = input(\"Enter the first city: \")\n",
    "city2 = input(\"Enter the second city: \")\n",
    "\n",
    "country1 = country2 = None\n",
    "\n",
    "for country, cities in countries.items():\n",
    "    if city1 in cities:\n",
    "        country1 = country\n",
    "    if city2 in cities:\n",
    "        country2 = country\n",
    "\n",
    "if country1 and country2:\n",
    "    if country1 == country2:\n",
    "        print(f\"Both cities are in {country1}\")\n",
    "    else:\n",
    "        print(\"They don't belong to the same country\")\n",
    "else:\n",
    "    print(\"One or both cities are not in the list.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "951e1a8d-84d9-4257-9a81-0ee37c28bfef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of times rolled a 6: 7\n",
      "Number of times rolled a 1: 2\n",
      "Number of times rolled two 6s in a row: 3\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "num_rolls = 20\n",
    "count_6 = 0\n",
    "count_1 = 0\n",
    "count_two_6s_in_a_row = 0\n",
    "previous_roll = None\n",
    "for _ in range(num_rolls):\n",
    "    roll = random.randint(1, 6)  \n",
    "    if roll == 6:\n",
    "        count_6 += 1\n",
    "    if roll == 1:\n",
    "        count_1 += 1\n",
    "    if roll == 6 and previous_roll == 6:\n",
    "        count_two_6s_in_a_row += 1\n",
    "    previous_roll = roll\n",
    "print(\"Number of times rolled a 6:\", count_6)\n",
    "print(\"Number of times rolled a 1:\", count_1)\n",
    "print(\"Number of times rolled two 6s in a row:\", count_two_6s_in_a_row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "23330d43-da09-46b7-bbe0-7f59a64be0a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You have completed 10 jumping jacks.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Are you tired? (yes/y or no/n):  no\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "90 jumping jacks remaining.\n",
      "You have completed 20 jumping jacks.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Are you tired? (yes/y or no/n):  yes\n",
      "Do you want to skip the remaining sets? (yes/y or no/n):  yes\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "You completed a total of 20 jumping jacks.\n"
     ]
    }
   ],
   "source": [
    "total_jumping_jacks = 100\n",
    "jumping_jacks_per_set = 10\n",
    "completed = 0\n",
    "\n",
    "while completed < total_jumping_jacks:\n",
    "    completed += jumping_jacks_per_set\n",
    "    print(f\"You have completed {completed} jumping jacks.\")\n",
    "    tired = input(\"Are you tired? (yes/y or no/n): \").strip().lower()\n",
    "    \n",
    "    if tired in [\"yes\", \"y\"]:\n",
    "        # Ask if they want to quit\n",
    "        skip = input(\"Do you want to skip the remaining sets? (yes/y or no/n): \").strip().lower()\n",
    "        if skip in [\"yes\", \"y\"]:\n",
    "            print(f\"You completed a total of {completed} jumping jacks.\")\n",
    "            break\n",
    "    else:\n",
    "        remaining = total_jumping_jacks - completed\n",
    "        if remaining > 0:\n",
    "            print(f\"{remaining} jumping jacks remaining.\")\n",
    "        else:\n",
    "            print(\"Congratulations! You completed the workout.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "153a2412-afd5-451e-abdf-27cd6f155140",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Friend name lengths: [('Aditya', 6), ('Rahul', 5), ('Samantha', 8), ('Priya', 5), ('Michael', 7)]\n"
     ]
    }
   ],
   "source": [
    "friends = [\"Aditya\", \"Rahul\", \"Samantha\", \"Priya\", \"Michael\"]\n",
    "friend_name_lengths = [(name, len(name)) for name in friends]\n",
    "print(\"Friend name lengths:\", friend_name_lengths)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b8fc2be8-1696-4a2d-945b-2c1b48137116",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your total expenses: 3000\n",
      "Partner's total expenses: 3050\n",
      "Your partner spent more overall.\n",
      "Biggest expense difference: Hotel with a difference of 200\n"
     ]
    }
   ],
   "source": [
    "your_expenses = {\n",
    "    \"Hotel\": 1200,\n",
    "    \"Food\": 800,\n",
    "    \"Transportation\": 500,\n",
    "    \"Attractions\": 300,\n",
    "    \"Miscellaneous\": 200\n",
    "}\n",
    "partner_expenses = {\n",
    "    \"Hotel\": 1000,\n",
    "    \"Food\": 900,\n",
    "    \"Transportation\": 600,\n",
    "    \"Attractions\": 400,\n",
    "    \"Miscellaneous\": 150\n",
    "}\n",
    "your_total = sum(your_expenses.values())\n",
    "partner_total = sum(partner_expenses.values())\n",
    "print(f\"Your total expenses: {your_total}\")\n",
    "print(f\"Partner's total expenses: {partner_total}\")\n",
    "if your_total > partner_total:\n",
    "    print(\"You spent more overall.\")\n",
    "elif your_total < partner_total:\n",
    "    print(\"Your partner spent more overall.\")\n",
    "else:\n",
    "    print(\"You both spent the same amount.\")\n",
    "max_diff = 0\n",
    "max_category = \"\"\n",
    "\n",
    "for category in your_expenses:\n",
    "    diff = abs(your_expenses[category] - partner_expenses[category])\n",
    "    if diff > max_diff:\n",
    "        max_diff = diff\n",
    "        max_category = category\n",
    "print(f\"Biggest expense difference: {max_category} with a difference of {max_diff}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed93b512-cb25-4560-94d4-9cc0639b44b6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
