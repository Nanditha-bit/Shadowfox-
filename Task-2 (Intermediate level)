{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "263e2c1f-e6f6-444e-bccb-7c0d66c9d6ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: requests in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (2.31.0)\n",
      "Requirement already satisfied: beautifulsoup4 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (4.12.2)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (from requests) (2.0.4)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (from requests) (3.4)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (from requests) (2.0.7)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (from requests) (2024.8.30)\n",
      "Requirement already satisfied: soupsieve>1.2 in c:\\users\\dsnan\\anaconda3\\lib\\site-packages (from beautifulsoup4) (2.5)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install requests beautifulsoup4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7ff5cec-1e4f-4e49-b12e-bf5e7ea67c3c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Title: More information..., Link: https://www.iana.org/domains/example\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "url = \"https://example.com\"  \n",
    "response = requests.get(url)\n",
    "soup = BeautifulSoup(response.text, \"html.parser\")\n",
    "for link in soup.find_all(\"a\"):\n",
    "    title = link.text.strip()\n",
    "    href = link.get(\"href\")\n",
    "    if title and href:\n",
    "        print(f\"Title: {title}, Link: {href}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ce96df6b-4a3e-448c-871a-6943c2467078",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to Hangman!\n",
      "\n",
      "_ _ _ _ _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  i\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrong! You have 5 attempts left.\n",
      "\n",
      "_ _ _ _ _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  y\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "_ y _ _ _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  p\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p y _ _ _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  t\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p y t _ _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  h\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p y t h _ _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  o\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p y t h o _\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Guess a letter:  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "You won! The word was 'python'\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "words = [\"python\", \"developer\", \"programming\", \"hangman\", \"computer\"]\n",
    "word = random.choice(words)\n",
    "hidden_word = [\"_\"] * len(word)\n",
    "attempts = 6\n",
    "guessed_letters = set()\n",
    "\n",
    "print(\"Welcome to Hangman!\")\n",
    "\n",
    "while attempts > 0 and \"_\" in hidden_word:\n",
    "    print(\"\\n\" + \" \".join(hidden_word))\n",
    "    guess = input(\"Guess a letter: \").lower()\n",
    "\n",
    "    if guess in guessed_letters:\n",
    "        print(\"You already guessed that letter!\")\n",
    "    elif guess in word:\n",
    "        for i, letter in enumerate(word):\n",
    "            if letter == guess:\n",
    "                hidden_word[i] = guess\n",
    "    else:\n",
    "        attempts -= 1\n",
    "        print(f\"Wrong! You have {attempts} attempts left.\")\n",
    "\n",
    "    guessed_letters.add(guess)\n",
    "\n",
    "if \"_\" not in hidden_word:\n",
    "    print(f\"\\nYou won! The word was '{word}'\")\n",
    "else:\n",
    "    print(f\"\\nGame Over! The word was '{word}'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d576e657-a476-4ab9-9e1e-f0c8789ac0e6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
